#everything that is needed for the app to function
---

###
#
# Upgrade tasks 
#  - 040to050 : Ubuntu Raring with custom container to docker.
# 
#
#

- name: Install old-release sources.list for unmaintained raring.
  copy: src=files/etc/apt/sources.list dest=/etc/apt/sources.list
  sudo: yes
  tags: 040to045

- name: Deactivate nginx
  service: name=nginx enabled=no state=stopped  
  sudo: yes
  tags: 040to045

- name: Deactivate clinic (old django app)
  service: name=clinic enabled=no state=stopped  
  sudo: yes
  tags: 040to045

## Docker

- name: Check that https transport for apt is enabled
  apt: pkg=apt-transport-https state=present
  sudo: yes
  tags: vagrant

#- name: add the docker repository key
#  apt_key: 'keyserver=hkp://keyserver.ubuntu.com:80 id=0xDF4FD13717AAD7D6 state=present'
#  sudo: yes
#  tags: vagrant

- name: add the wheezy-backports repository
  apt_repository: repo='deb http://http.debian.net/debian wheezy-backports main' state=present
  sudo: yes
  tags: vagrant

#- name: add the test docker repository - currently the get repository is not working
#  apt_repository: repo='deb https://test.docker.io/ubuntu docker main' state=present
#  sudo: yes

#- name: remove the get docker repository
#  apt_repository: repo='deb https://get.docker.io/ubuntu docker main' state=absent
#  sudo: yes

#- name: install docker
#  apt: pkg=lxc-docker state=present update_cache=true
#  sudo: yes
#  tags: vagrant

- name: Install Kernel-3.14
  apt: pkg=linux-image-amd64 state=present default_release=wheezy-backports update_cache=true
  sudo: yes
  tags: vagrant

- name: Use get docker script
  shell: curl -sSL https://get.docker.com/ | sh
  args:
    creates: /usr/bin/docker
  sudo: yes
  tags: vagrant

- name: Run docker as a service
  service: name=docker enabled=yes state=started
  sudo: yes
  tags: vagrant

# Install docker-py

- name: Clone docker-py repository
  git: repo=https://github.com/docker/docker-py.git dest=/opt/docker-py
  sudo: yes
  tags: vagrant

- name: Install python-setuptools
  apt: pkg=python-setuptools state=present
  sudo: yes
  tags: vagrant

- name: install docker-py
  command: python setup.py install chdir=/opt/docker-py
  sudo: yes
  tags: vagrant

## Install LTFHC Docker sources and build images

- name: Clone ltfhc-docker master repository
  git: repo=https://github.com/iilab/ltfhc-docker.git dest=/opt/ltfhc-docker
  tags: 
    - couchdb
    - portal
    - vagrant
  sudo: yes

- name: Build ltfhc-couch image
  docker_image: path="/opt/ltfhc-docker/ltfhc-couch" name="iilab/ltfhc-couch" state=build
  tags: 
    - couchdb
    - vagrant
  sudo: yes

## Remove ltfhc-couch if present

- name: Remove couch container
  docker: image="iilab/ltfhc-couch" name=couch ports=443:6984 state=absent
  tags: couchdb
  sudo: yes


#- name: Start ltfhc-couch
#  docker: image="iilab/ltfhc-couch" name=couch ports=443:6984 state=running
#  sudo: yes

# Loop file created with
# needs apt-get install cryptsetup
# 
# dd if=/dev/urandom of=/var/lib/ltfhc-data bs=1M count=500
# losetup /dev/loop0 /var/lib/ltfhc-data 
# cryptsetup luksFormat /dev/loop0
# cryptsetup luksOpen /dev/loop0 ltfhc-data
# mkfs.ext4 /dev/mapper/ltfhc-data
# systemctl stop ltfhc-couch.service
# mkdir /mnt/ltfhc-data
# mount /dev/mapper/ltfhc-data /mnt/ltfhc-data

# Then partition mounted with empty couchdb and master accounts created (root, deploy, jun)

# then 
# systemctl stop ltfhc-couch.service
# umount /mnt/ltfhc-data
# cryptsetup luksClose /dev/mapper/ltfhc-data
# losetup -d /dev/loop0

# Copy empty container to secure location for provisioning.

# Mounting the partition should be
# losetup /dev/loop0 /var/lib/ltfhc-data 
# cryptsetup luksOpen /dev/loop0 ltfhc-data
# mount /dev/mapper/ltfhc-data /mnt/ltfhc-data

# - name: Install ltfhc-data empty encrypted loop file

- name: Install ltfhc-couch as a system ctl service
  copy: src=files/etc/systemd/system/ltfhc-couch.service dest=/etc/systemd/system/ltfhc-couch.service
  sudo: yes
  when: ltfhc_country!="tz"
  tags: 
   - couchconfig
   - 050to051
   - vagrant
  notify: 
   - reload systemctl
   - restart ltfhc-couch

- name: Install ltfhc-portal as a system ctl service
  copy: src=files/etc/systemd/system/ltfhc-portal.service dest=/etc/systemd/system/
  sudo: yes
  tags: 
   - portal
  notify: 
   - reload systemctl
   - restart ltfhc-portal

- name: Install portal site files
  copy: src=files/opt/ltfhc-portal/ dest=/opt/ltfhc-portal
  sudo: yes
  tags: portal
  notify: 
   - reload systemctl
   - restart ltfhc-portal

- name: Create /etc/couchdb
  file: path=/etc/couchdb state=directory
  sudo: yes
  when: ltfhc_country!="tz"
  tags: 
   - couchconfig
   - 050to051
   - vagrant
  notify: 
   - reload systemctl
   - restart ltfhc-couch

- name: Symlink /etc/couchdb for Tanzania
  file: src=/home/ltfhc-deploy/etc/couchdb dest=/etc/couchdb state=link
  sudo: yes
  tags: 
   - couchconfig
   - vagrant
  when: ltfhc_country=="tz"

- name: Install couchdb default configuration file
  copy: src=files/etc/couchdb/default.ini dest=/etc/couchdb/default.ini
  sudo: yes
  tags: couchconfig
  tags: 
   - couchconfig
   - 050to051
   - vagrant
  notify: 
   - reload systemctl
   - restart ltfhc-couch

- name: Install customized local couchdb configuration file
  template: src=files/etc/couchdb/local.ini.template dest=/etc/couchdb/local.ini
  sudo: yes
  tags: 
   - couchconfig
   - 050to051
   - vagrant
  notify: 
   - reload systemctl
   - restart ltfhc-couch

- name: Install snakeoil creates
  apt: pkg=ssl-cert state=present
  sudo: yes
  tags: vagrant

- name: Install snakeoil cert
  command: creates="/etc/couchdb/health.crt" mv /etc/ssl/certs/ssl-cert-snakeoil.pem /etc/couchdb/health.crt
  sudo: yes
  tags: vagrant

- name: Install snakeoil cert
  command: creates="/etc/couchdb/health.key" mv /etc/ssl/private/ssl-cert-snakeoil.key /etc/couchdb/health.key
  sudo: yes
  tags: vagrant

- name: Install SSL cert file
  template: src=files/etc/couchdb/health.crt dest=/etc/couchdb/health.crt
  sudo: yes
  ignore_errors: yes
  tags: 
   - couchconfig
   - 050to051
  notify: 
   - reload systemctl
   - restart ltfhc-couch

- name: Install SSL key file
  template: src=files/etc/couchdb/health.key dest=/etc/couchdb/health.key
  sudo: yes
  ignore_errors: yes
  tags: 
   - couchconfig
   - 050to051
  notify: 
   - reload systemctl
   - restart ltfhc-couch

#- meta: flush_handlers


- name: reload systemctl
  command: systemctl --system daemon-reload
  sudo: yes
  tags: 
   - couchconfig
   - portal
   - vagrant
   - 050to051

- name: restart ltfhc-couch
  service: name=ltfhc-couch.service enabled=yes state=restarted
  sudo: yes
  tags: 
    - couchconfig
    - couchdb
    - vagrant
    - 050to051

- name: Restart couchdb service for Tanzania
  service: name=couchdb enabled=yes state=restarted
  sudo: yes
  tags: 
    - couchconfig
    - couchdb
  when: ltfhc_country=="tz"

#- name: restart ltfhc-portal
#  service: name=ltfhc-portal.service enabled=yes state=stopped
#  sudo: yes
#  tags: portal

#- name: Add docker.io to sources.list
#  raw: echo deb http://get.docker.io/ubuntu docker main | sudo tee /etc/apt/sources.list.d/docker.list
#  sudo: yes

# Add an Apt signing key, will not download if present
#- apt_key: id=473041FA url=https://ftp-master.debian.org/keys/archive-key-6.0.asc state=present
#sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 36A1D7869245C8950F966E92D8576A8BA88D21E9
#- name: Add docker.io developer's gpg key
#  apt_key: id=A88D21E9 keyserver=keyserver.ubuntu.com
#  sudo: yes

# sudo apt-get install -y lxc-docker
#- name: Update apt's cache and install docker
#  apt: pkg=lxc-docker update_cache=yes
#  sudo: yes




